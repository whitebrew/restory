{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","fileName","setFileName","messages","setMessages","isParsed","setIsParsed","onParsing","setOnParsing","setMemberName","setMemberCount","setMemberList","parseFile","text","allLines","split","message","started","createdAt","forEach","line","index","Array","isArray","match","name","count","list","getMemberNameAndCount","firstTokenIndex","indexOf","date","substring","time","remain","trim","secondTokenIndex","content","push","className","htmlFor","value","readOnly","type","onChange","files","target","fileReader","FileReader","readAsText","onload","result","map","Object","keys","item","renderFile","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fec6fc36.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nfunction App() {\n  const [fileName, setFileName] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isParsed, setIsParsed] = useState(false);\n  const [onParsing, setOnParsing] = useState(false);\n  const [memberName, setMemberName] = useState('');\n  const [memberCount, setMemberCount] = useState(0);\n  const [memberList, setMemberList] = useState([]);\n\n  const getMemberNameAndCount = (line) => {\n    const memberIsOne = !Array.isArray(line.match(/\\d+\\s님과 카카오톡 대화$/));\n    if (memberIsOne) {\n      const name = line.match(/(.+)( 님과 카카오톡 대화$)/)[1];\n      setMemberName(name);\n    } else {\n      const count =\n        line.match(/\\d+\\s님과 카카오톡 대화$/)[0].match(/^\\d+/)[0] - 1;\n      const list = line.match(/(.+)( \\d+ 님과 카카오톡 대화$)/)[1].split(',');\n      setMemberCount(count);\n      setMemberList(list);\n    }\n  };\n\n  const readFile = ({ target: { files } }) => {\n    setFileName(files[0].name);\n    setOnParsing(true);\n    const fileReader = new FileReader(files[0]);\n\n    fileReader.readAsText(files[0]);\n    fileReader.onload = ({ target: { result } }) => parseFile(result);\n  };\n\n  const parseFile = (text) => {\n    const allLines = text.split(/\\r\\n/);\n    const messages = [];\n    let message = {};\n    let started = false;\n    let createdAt = '';\n\n    allLines.forEach((line, index) => {\n      if (index === 0) {\n        getMemberNameAndCount(line);\n      } else {\n        const firstTokenIndex = line.indexOf(',');\n        if (firstTokenIndex !== -1) {\n          const date = line\n            .substring(0, firstTokenIndex)\n            .match(/(.+일) (.+)/)[1];\n          const time = line\n            .substring(0, firstTokenIndex)\n            .match(/(.+일) (.+)/)[2];\n          const remain = line.substring(firstTokenIndex + 1).trim();\n          const secondTokenIndex = remain.indexOf(':');\n          const name = remain.substring(0, secondTokenIndex).trim();\n          const content = remain.substring(secondTokenIndex + 1).trim();\n\n          if (createdAt === date) {\n            message[date].push({ name, content, time });\n          } else {\n            if (started) {\n              messages.push(message);\n              message = {};\n              message[date] = [{ name, content, time }];\n            } else {\n              message[date] = [{ name, content, time }];\n              started = true;\n            }\n            createdAt = date;\n          }\n        }\n      }\n    });\n\n    setMessages(messages);\n    setIsParsed(true);\n    setOnParsing(false);\n  };\n\n  const renderFile = (messages) => {\n    return (\n      <div className=\"messages-container\">\n        {messages.map((message) => {\n          const date = Object.keys(message);\n\n          return (\n            <div className=\"message-container\">\n              <div className=\"date\">{date}</div>\n              {message[date].map((item) =>\n                item.name === '회원님' ? (\n                  <div className=\"mine\">\n                    <div className=\"mine-col\">\n                      <div className=\"mine-createdAt\">{item.time}</div>\n                    </div>\n                    <div className=\"mine-col\">\n                      <div className=\"mine-content\">{item.content}</div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"others\">\n                    <div className=\"others-col\">\n                      <div className=\"others-profile\"></div>\n                    </div>\n                    <div className=\"others-col\">\n                      <div className=\"others-name\">{item.name}</div>\n                      <div className=\"others-wrapper\">\n                        <div className=\"others-content\">{item.content}</div>\n                        <div className=\"others-createdAt\">{item.time}</div>\n                      </div>\n                    </div>\n                  </div>\n                ),\n              )}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"app\">\n      <header>\n        <div className=\"container\">\n          <div className=\"inner-header\">Restory</div>\n        </div>\n      </header>\n      <div className=\"banner\"></div>\n      <div className=\"input-container\">\n        <div className=\"container\">\n          <form>\n            <div className=\"input-row\">\n              <label htmlFor=\"file\">File</label>\n              <input className=\"file-name\" value={fileName} readOnly />\n              <div className=\"file-upload\">\n                <input\n                  type=\"button\"\n                  className=\"file-upload-button\"\n                  value=\"찾아보기\"\n                />\n                <input\n                  type=\"file\"\n                  className=\"file-input-hidden\"\n                  onChange={readFile}\n                />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <section className=\"render-container\">\n        <div className=\"container\">{isParsed && renderFile(messages)}</div>\n      </section>\n      <div\n        className={\n          onParsing\n            ? 'loading-modal-container active'\n            : 'loading-modal-container'\n        }\n      >\n        <span></span>\n        <span></span>\n        <span></span>\n        Loading ...\n      </div>\n      <footer>\n        <div className=\"container\">\n          <div className=\"inner-footer\">\n            <div>ⓒ Whitebrew, Inc. All rights reserved.</div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}